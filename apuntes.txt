JSON PRUEBA api/users { "name": "Cristian", "city": "Medallo", "telephone": "5555555555" }

//TOKEN
function parseJwt (token) {
    var base64Url = token.split('.')[1];
    var base64 = base64Url.replace('-', '+').replace('_', '/');
    return JSON.parse(window.atob(base64));
};

CORS 
--> chrome.exe --user-data-dir="C://Chrome dev session" --disable-web-security
--> "C:\Program Files (x86)\Google\Chrome\Application\chrome.exe" --disable-web-security --disable-gpu --user-data-dir=~/chromeTemp
		
HEROKU
https://access-control-poli.herokuapp.com/

> heroku login -> access.control.poli@gmail.com
> heroku git:remote -a access-control-poli

> git remote

> git push -u origin master
> git push heroku master

> heroku logs --tail
> heroku logs --source app --tail


FRONT
npm update
npm start

router.js
		router.get('/api/generateqr', (req, res) => {
			//recibo query params $correo=true || $correo=false
			let body = req.body;
			// let sendMail = req.query.correo || false;
			// sendMail = Boolean(sendMail);

			// if (sendMail) {
			//     //MyMethods.sendMailTo(req.body.email, qrimage)
			// }

			console.log(`request -> GET ${req.path}`);
			const user = req.body; //.name.....
			// if (err) {
			//     console.log(`Error GET ./  _:` + err);
			//     res.json({
			//         ok: false,
			//         mensaje: 'Vamos mal!!'
			//     })
			// }

			//recibir data del formulario (json)

			//generarQR

			//recibir parametro en el path /api/generateqr $correo = 

			//if(true)->(enviarQRemail)

			//if(false)->(exponerQRdownload)

			//RES.CREADO,RES.NOCREADO

			res.status(200).json({
				ok: true,
				mensaje: 'Vamos bien!!',
				usuario: user
			});
		});

		router.get('/api/validateqr', (req, res) => {

			console.log(`request -> GET ${req.path}`);

			// recibir data del QR
			// consultar #QR, documento
			// si QR.valido (por fecha) RES.OK
			// si QR.invalido (por fecha o documento) RES.FALSE

			res.status(200).json({
				ok: true,
				mensaje: 'Vamos bien!!'
			});
		});

{"user":{"nombre":"CRISTIAN","apellido":"garces","cedula":"1111111","email":"cristian_garces82121@elpoli.edu.co","celular":"5555555555","tipoPersona":"estudiante","fecha":"2019-06-29","motivoVisita":"ooooooooo"}}

ARN arn:aws:s3:::qr-storage-poli
{
  "Version":"2012-10-17",
  "Statement":[
    {
      "Sid":"AddPerm",
      "Effect":"Allow",
      "Principal": "*",
      "Action":["s3:*"],
      "Resource":["arn:aws:s3:::qr-storage-poli/*"]
    }
  ]
}

----------
#DB
DROP TABLE [ IF EXISTS ] public.solicitud_ingreso

CREATE TABLE public.solicitud_ingreso
(
    id_solicitud varchar(70) COLLATE pg_catalog."default" NOT NULL,
    id_usuario numeric(20,0) NOT NULL,
    nombre_usuario varchar(80) COLLATE pg_catalog."default" NOT NULL,
    email_usuario varchar(50) COLLATE pg_catalog."default" NOT NULL,
    tipo_usuario varchar(30) COLLATE pg_catalog."default" NOT NULL,
    fecha_visita varchar(20) COLLATE pg_catalog."default" NOT NULL,
    motivo_visita text COLLATE pg_catalog."default",
    CONSTRAINT pk_id_solicitud PRIMARY KEY (id_solicitud)
)
WITH (
    OIDS = FALSE
)
TABLESPACE pg_default;

ALTER TABLE public.solicitud_ingreso
    OWNER to jruvdeaplphskx;

-------
INSERT INTO public.solicitud_ingreso(
        id_solicitud,       id_usuario, nombre_usuario,         email_usuario,      tipo_usuario, fecha_visita, motivo_visita)
VALUES ('correo_mmddhhmmss', 11223344, 'Crisis Cesgar Agdddd', 'cgaop7@gmail.com', 'Estudiantt', '2019-06-59', 'MuuuuuuuuuuuuuuuuuchhhhhhhhhhhhhhhooooooooooooTEXTO');